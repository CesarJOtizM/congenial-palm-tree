services:
  # ======================================
  # üöÄ Backend NestJS
  # ======================================
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: deudas-backend
    env_file:
      - .env.${ENV_FILE:-development}.local
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - deudas-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Para desarrollo - hot reload (comentar en producci√≥n)
      - ./apps/backend/src:/app/apps/backend/src:ro

  # ======================================
  # üóÑÔ∏è Base de datos PostgreSQL
  # ======================================
  postgres:
    image: postgres:15-alpine
    container_name: deudas-postgres
    env_file:
      - .env.${ENV_FILE:-development}.local
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-deudas_app}
      POSTGRES_USER: ${POSTGRES_USER:-deudas_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-deudas_password}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sh:/docker-entrypoint-initdb.d/01-init_db.sh
      - ./packages/database/prisma:/docker-entrypoint-initdb.d/02-prisma
    networks:
      - deudas-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U $${POSTGRES_USER:-deudas_user} -d $${POSTGRES_DB:-deudas_app}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # ======================================
  # üî¥ Redis para cach√©
  # ======================================
  redis:
    image: redis:7-alpine
    container_name: deudas-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - deudas-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # ======================================
  # üîç Prisma Studio para desarrollo
  # ======================================
  prisma-studio:
    build:
      context: .
      dockerfile: packages/database/Dockerfile
    container_name: deudas-prisma-studio
    env_file:
      - .env.${ENV_FILE:-development}.local
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      # Variables cargadas autom√°ticamente por @repo/config desde .env.${ENV_FILE}.local
    ports:
      - '5555:5555'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - deudas-network
    command: bun run db:studio
    profiles:
      - dev

  # ======================================
  # üîß pgAdmin para administraci√≥n de PostgreSQL
  # ======================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: deudas-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@deudas.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - '8080:80'
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - deudas-network
    profiles:
      - dev

  # ======================================
  # üìä Redis Commander para administraci√≥n de Redis
  # ======================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: deudas-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    ports:
      - '8081:8081'
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - deudas-network
    profiles:
      - dev

  # ======================================
  # üìã Nginx para proxy reverso (opcional)
  # ======================================
  nginx:
    image: nginx:alpine
    container_name: deudas-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - deudas-network
    profiles:
      - prod

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  deudas-network:
    driver: bridge
